#!/bin/bash
#
. i_config

# Funcionalidad no implementada
#==> * en la funcion DUMP, deberia poder recibir un archivo de plan de dumpeo como parametro
#==> * Hacer un dump sin INSERTS

##***********************************************************************************************##
## HOLA!
##***********************************************************************************************##

if [ "$1" = "hola" ]
then

	echo " objetivo: Administracion basica de PROYECTOS en <I> (Instancia)"
	echo "           Se debe ejecutar desde la carpeta '/sql' de un PROYECTO (IMPORTANTE!!!)"
	echo "           Tiene que existir al menos una instancia declarada en \"\$toba_dir/php/instancias.php\""
	echo "           Si no se especifica una <I> se utiliza la variable de entorno \"\$toba_instancia\""
	echo "           AHORA: <I> = $toba_instancia"

##***********************************************************************************************##
## Ejecutar NIVEL
##***********************************************************************************************##
#@ adm [<I>] nivel X [--debug] [--noparar]     -- Ejecuta "pgsql_X[00-99]_*.sql" en <I>

elif [ "$1" = "nivel" ]
then
	
	for a in `ls -1 ${s_sql_ini}$2${s_sql_fin}  | awk '{ print $1 }'`
	do
		pgsql_ejecutar $a $3 $4
		controlar "Ejecutar SCRIPT $a en la INSTANCIA $instancia"
	done

##***********************************************************************************************##
## Ejecutar NIVEL A - Tablas y secuencias que componen la infraestructura
##***********************************************************************************************##
#@ adm [<I>] crear [--debug] [--noparar]       -- Crea la estructura del PROYECTO en <I>

elif [ "$1" = "crear" ]
then

	adm $instancia nivel a $2 $3

##***********************************************************************************************##
## Cargar los datos del PROYECTO
##***********************************************************************************************##
#@ adm [<I>] cargar [--debug] [--noparar]      -- Carga la estructura del PROYECTO en <I>

elif [ "$1" = "cargar" ]
then
	
	# Controlo que exista el archivo
	if [ ! -f $s_sql_datos ]
	then
		echo "No existe el archivo \"$s_sql_datos\""
		exit 2
	fi

	# Cargo registros
	pgsql_ejecutar $s_sql_datos $2 $3
	controlar "CARGAR datos en INSTANCIA $instancia"

##***********************************************************************************************##
## Procedimientos a correr despues de cargar el DUMP
##***********************************************************************************************##
#@ adm [<I>] crear_post [--debug] [--noparar]  -- Crea definiciones posteriores al DUMP

elif [ "$1" = "crear_post" ]
then

	adm $instancia nivel z $2

##***********************************************************************************************##
## Instala el PROYECTO en la INSTANCIA
##***********************************************************************************************##
#@ adm [<I>] instalar                          -- Instala el PROYECTO <I> (crear, cargar, crear_post)

elif [ "$1" = "instalar" ]
then

	adm $intancia crear
	controlar "INSTALAR - PASO 1: crear estructura..."

	adm $intancia cargar
	controlar "INSTALAR - PASO 2: cargar datos..."

	adm $intancia crear_post
	controlar "INSTALAR - PASO 3: crear_post (Constraints, etc)..."

	adm $intancia vac $2
	controlar "INSTALAR - PASO 4: VACUUM del proyecto..."


	#cd $d_backups
	item /consola/dump -v -h > $d_backup_archivo
	echo $d_backup_archivo > $d_backup_archivo_reg

##***********************************************************************************************##
## VACUUM del PROYECTO
##***********************************************************************************************##
#@ adm [<I>] vac                               -- VACUUM FULL ANALYSE del PROYECTO en <I>

elif [ "$1" = "vac" ]
then

	if [ -e __vac.sql ]
	then
		pgsql_ejecutar __vac.sql
		controlar "VACUUM FULL ANALYSE tablas en '$db_base'"
	else
		echo "No se encuentra el archivo \"__vac.sql\". "
		echo "    (Posible error 1) Este no es un directorio de scripts SQL."
		echo "    (Posible error 2) Falta ejecutar \"sql adm\"."
	fi

##***********************************************************************************************##
## Borrar el PROYECTO de <I>
##***********************************************************************************************##
#@ adm [<I>] borrar [--debug] [--noparar]      -- Elimina PROYECTO de <I>

elif [ "$1" = "borrar" ]
then

	if [ -e ${c_auto}/__i_drop.sql ]
	then
		echo
		sp_ "Desea ELIMINAR el proyecto de la INSTANCIA '$instancia'?"
		while [ : ]
		do
			read respuesta
			if [ $respuesta = "S" ]
			then
				pgsql_ejecutar ${c_auto}/__i_drop.sql $2 $3 --noparar
			else
				exit 1
			fi
			break
		done
	else
		echo "No se encuentra el archivo \"${c_auto}/__i_drop.sql\". "
		echo "    (Posible error 1)  Este no es un directorio de scripts SQL."
		echo "    (Posible error 2)  No hay metadatos creados (Ver comando \"sql\")."
		echo
		exit 2
	fi

##***********************************************************************************************##
## Vaciar tablas APL
##***********************************************************************************************##
#@ adm [<I>] vaciar [--debug] [--noparar]      -- Vacia vacia datos del PROYECTO en <I>

elif [ "$1" = "vaciar" ]
then

	if [ -e ${c_auto}/__i_del.sql ]
	then
		echo
		sp_ "Desea VACIAR los datos del PROYECTO en <I> '$instancia'?"
		while [ : ]
		do
			read respuesta
			if [ $respuesta = "S" ]
			then
				pgsql_ejecutar ${c_auto}/__i_del.sql $2 $3
				controlar "Vaciar PROYECTO en '$instancia'"
			fi
			break
		done
	else
		echo "No se encuentra el archivo \"${c_auto}/__i_del.sql\". "
		echo "    (Posible error 1)  Este no es un directorio de scripts SQL."
		echo "    (Posible error 2)  No hay metadatos creados (Ver comando \"sql\")."
		echo
		exit 2
	fi
	
##***********************************************************************************************##
## Regenerar el proyecto
##***********************************************************************************************##
#@ adm [<I>] regen                             -- Regenera BASE con el ultimo DUMP

elif [ "$1" = "regen" ]
then

	adm $instancia borrar
	controlar "REGENERACION - PASO 1: borrar"

	adm $intancia instalar
	controlar "REGENERACION - PASO 2: instalar..."

	s_ "Regeneracion satisfactoria!!!"

##***********************************************************************************************##
## Ver Cosas Pendientes
##***********************************************************************************************##
elif [ "$1" = "pendiente" ]
then
	pendiente $0

##***********************************************************************************************##
## Ayuda
##***********************************************************************************************##
else
	ayuda $0
fi

##***********************************************************************************************##
##***********************************************************************************************##
