Hola a todos!

Entre las revisiones 237 y 239 del trunk de toba se incluye lo siguiente:

A- Lineamientos generales de programación javascript
B- Nuevas funcionalidades y esquema de extensión javascript de los
formularios y efs
C- Mascaras genéricas, numéricas y de fechas en los ef_editable
D- ef_moneda
E- Testing automático en javascript
F- Cambios menores
G- Cosas pendientes

_________________________________________________________________________________________
A- Lineamientos generales de programación javascript

En $toba_dir/nucleo/browser/js.php está disponible la clase js que
brinda servicios para:

- Creación de los tags <script> usando la versión js estándar de toba
La necesidad de centralizar la creación es por un lado que el atributo
language del tag <script> varía bastante la forma en que los browser
ejecutan el código contenido (por ejemplo mozilla con el tag
javascript1.2 anda bastante distinto, de ie ni hablar..) y por otro
lado es para restringir a los browser viejitos, ya que se están
utilizando servicios de javascript1.4 (bah, en realidad por ahora solo
excepciones). Es una decisión que elimina a los mas viejos que IE5 y
Netscape5, pero alivia un poco el quilombo histórico de trabajar con
javascript.

- Incluir los llamados 'consumos globales'
Los 'consumos globales' son archivos .js modulares disponibles en el
document root.
Toda ejecución tiene disponible el consumo global 'basico'
($toba_dir/www/js/basico.js) que por ahora brinda:
       -Extensiones al objeto string
       -Funciones sobre arreglos parecidas a las que hay en php
       -Funciones para debug:
               -ei_arbol, hace alert de un arreglo asociativo (mejora
el alert del IE)
               -logger, si esta activada la constante del punto de
acceso 'apex_pa_log_pantalla' hace un dump en el documento
       -Función para concatenar eventos a objetos, es preferible esto
a cambiar directamente el atributo on... porque de esta última forma
se pisa el listener anterior.
Por ahora se siguen manteniendo funciones globales definidas en otro
lado (principalmente en includes/javascript.php), pero están
'deprecated'.

_________________________________________________________________________________________
B- Nuevas funcionalidades y esquema de extensión javascript de los
formularios y efs

Todos los efs tienen una clase js asociada
($toba_dir/www/js/interface/), lo mismo sucede con los objetos
ei_formulario y ei_formulario_ml ($toba_dir/www/js/clases/). De a poco
se van moviendo todos los comportamientos que estaban dispersos hacia
estas clases.

La centralización en clases va a permitir hacer extensiones más
ordenadas y potentes. En
$toba_dir/docs/referencia/extension_js.txt.php se encuentra una breve
referencia de como hacerlas. Es recomendado mirar las extensiones que
se utilizan en los casos de test de js, (ver E-) sería muy interesante
seguir agregando extensiones clásicas a estos casos, así en un futuro
esta garantizado que cualquier refactoring o agregado de funcionalidad
no las rompe.

En los objeto_ei_formulario aparece un nuevo término 'procesamiento'
(siempre en js) que permite hacer comportamientos complejos entre los
ef. En el caso del formulario común, un ef se 'procesa' cuando se
finaliza la edición de su valor. En el ML sucede lo mismo pero sobre
toda una columna. Más info en el documento y en el proyecto
toba_testing.

_________________________________________________________________________________________
C- Mascaras genéricas, numéricas y de fechas en los ef_editable

La rama del ef_editable (menos el ef_popup que en cualquier momento se
cambia de rama) tiene la posibilidad de manejar máscaras. Que un ef
tenga una máscara quiere decir que:
       - Su valor va a ser restringido guiando al operador en la carga
(no quiere decir que va a ser un valor válido, eso solo lo puede
asegurar el validar del ef)
       - Su forma visual puede variar de su valor ($ 1.234,56 -> 1234.56).

Actualmente la implementación de mascaras se basa en una clase
gratuita bastante sucia pero que funciona. Básicamente brinda tres
tipos distintos de mascaras: genéricas, numéricas y de fechas. Para
ver los ejemplos 'soportados' hay que mirar los casos de test (la onda
es que además de asegurar cosas sirvan como documentación). Cualquier
mascara nueva que se quiera usar debería pasar primero los test.
Ejemplos de mascaras son:
       Numéricas:
               - mascara: $ #.###,00           entrada: 1234.5697     
        salida: $ 1.234,57
               - mascara: (###.###,###)        enrrada: -1234.5697    
        salida: (1.234,569)
       Fechas:
               - dd/mm/yyyy
               - mm/dd/yy (ojo que en PHP aún se restringe a dd/mm/yyyy)
       Genéricas:  (###) ###-####

La clase originalmente estaba fijada con formato inglés y cambiarlo
fue un parto (más que nada por la inconsistencia de que usamos el '.'
en el teclado para poner una coma...) así que pueden haber bugs locos.

Como los input de HTML tienen un único value (gracias a dios), en
cuanto se aprueba el submit del CI todos los ef reemplazan su forma
visual por su valor real por lo que PHP sigue viendo los valores como
hasta ahora.

_________________________________________________________________________________________
D- ef_moneda

Por ahora es sólo un ef_editable_numero con una máscara por defecto $
#.###,00. Para poder empezar a usarlo hay que esperar el datos.sql
nuevo.

_________________________________________________________________________________________
E- Testing automático en javascript

El testing automático se implementa con esta librería:
http://www.edwardh.com/jsunit/ (otro casi clon de JUnit). El
funcionamiento es similar al test de php. Un caso de test es un
archivo html que tiene tres secciones:
       -Inclusión de otros js
       -Las pasadas
       -Código HTML utilizado como conejito de indias

Opcionalmente tiene un SetUp y TearDown que se ejecuta entre pasada y
pasada. Las pasadas las identifica porque empiezan con 'test'.

Hasta ahora todas las clases js tiene su test (algunos mas completas
que otras) en $toba_dir/www/js/testing/. Agregar un .html a ese
directorio hace que el item de toba /pruebas/testing_automatico_js lo
muestre en su listado (para poder empezar a usarlo hay que esperar el
datos.sql nuevo). Hay un casos.html que corre todos los casos juntos
(hay que acordarse de agregar a este archivo la llamada a todo caso
nuevo).
_________________________________________________________________________________________
F- Cambios menores

- Los tooltips se muestran usando el title del browser y no un div
flotante. Evita la superposición con los combos en el IE
- El logger de php y js se muestran ocultos en la sección inferior de
las pantallas, es muy molesto verlo continuamente (¿podemos negociar
con que sea un parámetro?)

_________________________________________________________________________________________
G- Cosas pendientes

-La clase js no debe ser estática sino un singleton, para evitar la
doble carga de consumos globales
-Los CI necesitan clases js, principalmente para que los formularios
puedan enviar el comando submit, por ejemplo cuando cambia el valor
del combo. Actualmente esta extensión sólo hace submit del
objeto_ei_formulario pero no pasa nada a nivel de CI.
- Ahora con los efs se puede jugar en ejecución de muchas formas, hay
que empezar a agregarles comportamientos a todas las subclases
(ocultar, inhabilitar...)
_________________________________________________________________________________________

CUALQUIER comentario será muy bienvenido, principalmente la opinión de
que les parece las mascaras (principalmente si tienen experiencia con
mascaras en otros ambientes). Gracias y un abrazo a todos!!

Seba

PD: Este mensaje lo envie el viernes pero shakespeare.siu.edu.ar no
respondió al SMTP... disculpas si llega duplicado.