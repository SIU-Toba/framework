**************************************************************************************************
**	TEMAS para charlar
**************************************************************************************************

	API de los elementos toba
	-------------------------

		- ...
	
	Edicion de elementos
	--------------------
	
		- Hay que rodear al db_tablas con una clase (que represente mas el objeto que se esta editando)?
			- Puede ser interesante para cosas como el BORRADO de un elemento.
		- Hay que desacoplar el db_tablas que se usa para el editor de la forma en el que el mismo se persiste
			- Estaria bueno que el mecanismo de persistencia se cargue por definicion
			- El elemento solo sabe lo que se pidio y las diferencias que posee respecto del original
			- Puede escribirse toda una definicion sobre un archivo PHP, xml, o lo que sea

	Construccion de objetos
	-----------------------
	
		- Una clase deberia englobar la creacion de un objeto por partes en forma dinamica
		- Cual es la relacion entre esta clas y la clase wrapper del db_tablas

	objeto_ci
	---------

		- Comportamientos de pantalla recurrentes
			- dbr -> form
			- dbr -> form_ml
			- dbr -> form_ml posicion
			- dbr -> form + cuadro + $seleccion
			- dbr -> form_ml + (ei)* + $seleccion
			- dbr -> ci
			- array -> form + cuadro + $seleccion

		- Mejorar la forma de declarar eventos ad-hoc
			- Es incomodo definir eventos para pantallas puntuales
			- Hay que propagar eventos del ancestro

	objeto_ei_formulario 
	--------------------

		- Problemas con la definicion de eventos
			- se puede necesitar eventos por defecto, visibles o no.
			- Comportamientos harcodeados en las clases

	Tareas pendientes sobre el el administrador
	-------------------------------------------

		- Modificar objetos runtime (levantar eventos, etc)
		- objeto_db_registros y objeto_db_tablas
		- Terminar la conversion
		- Hacer el item que despacha a los distintos editores
		- Hacer el enganche con el administrador actual
			- Como acceder a las subpartes (efs puntuales, edicion extendida, etc.)?
		- Cosas puntuales de los editores
			- Diferenciar mas la linea que se esta editando obtener_html_contenido__2()
			- Interaccion entre el editor y PHP
				- Si se crea un metodo que modifica el comportamiento, que interactue con los forms 
					(ej: la asociacion de dependencias a pantalla podria desaparecer)
				- Mostrar eventos declarados en la pantalla que corresponda (Ej: configuracion de eventos en el tab de eventos)
			- Hay que mostrar las operaciones a las que un objeto participa.
			- Cargar la lista completa de parametros de efs (a futuro se pueden devolver efs para hacer un ei_formulario y no un ML).
			- Validaciones de efs.
			- Tiene sentido asignar en la asociacion de dependencias nombrar una funcion que responda si un ei se utiliza o no?
				- Esto puede simplificar la definicion de eis a utilizar... (y puede ser el mecanismo para olvidarse que que objetos son CI!)
		- objetos toba que que no poseen editor:
			- Editor ci_cn (combo?)
			- Editor de ci_abms_dbr (falta que el objeto_db_registros)
			- Editor ci_abms_dbt (falta el objeto_db_tablas y el esquema de "comportamientos de pantalla")
		- Editor de items (pasar patron a accion)
			- como se puede simplificar la asociacion de un CI?
		- Que se hace con el acceso a la arquitectura transversal?

	Otros
	-----

		- ZONA?
		- Personalizaciones. Como hacer algo que implemente el esquema concreto que usa el SIU?
		- Preguntarle a seba sobre layout sin tablas
		- Ajustar el cronograma de tickets
		- Mecanismo de reconfirmacion
		- Esquema de VERSIONADO inherente alos dbrs?

	Bugs
	----

		- Editor CSS
		- El ML recuerda el estado

**************************************************************************************************
** Borrador para el contenido de la presentacion del TOBA 
**************************************************************************************************

	(Se dispone de 20 min. para las dos presentaciones (SIU, SADIO?)

	- Parte 1 (5 min.): Explicar los principios de la herramienta de una forma simple.
	- Parte 2 (5 min.): Mostrar el tipo de interaces que se pueden lograr con ejemplos.
	- Parte 3 (5 min.): Comentar algunos detalles interesantes.
	- Parte 4 (5 min.): Hablar sobre el esquema de trabajo (mostrar ejemplos).

	- 1) Inicio

		- Intro:
			- El toba es una herramienta para hacer aplicaciones compuestas por operaciones
			- Una operacion representa una accion atomica sobre un elemento del sistema.
			- Se define una operacion componiendo partes. 
		
		- Objetivo:
			- Permite enfocar el desarrollo en la logica de negocio y no en la infraestructura
				- no se necesita un arquitecto.
				- el grupo queda esta mas orientado a concretar los requerientos de la aplicacion.
			- Apunta a lograr un balance adecuado entre tiempo de desarrollo y calidad del producto.
		

		- Se crean componentes visuales (EI), se los juntado y se les asigna un comportamiento
		 	(Ver la composicion de una operacion)
		- balance datos/codigo 
			- Utilizar la parte PHP de los editores
			- Explicar la relacion PHP/JS.
		- Las operaciones se publican en un menu y se les asigna permisos.


	- 2) Ejemplos de interfaces complejas
		- Formas de navegacion
		- Colapsado, resumen y ocultamiento
		- Formularios ML

	- 3) Temas, cosas interesantes
		
		- Ventana transaccional
		- Editor de CSS
		- Debug Javascript
		- Seguridad

	- 4) Esquema de trabajo 
		- (el equipo esta distribuido)
		- svn
		- integracion continua
		- testing automatico
		- trac

**************************************************************************************************
**************************************************************************************************