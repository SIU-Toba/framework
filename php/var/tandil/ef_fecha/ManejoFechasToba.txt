Juan,
en este documento figuran todos los cambios que hicimos para trabajar con campos de tipo fecha en PostgreSQL.
Además de estos cambios hay que agregar los archivos que te enviamos y copiarlos de la siguiente forma:
- en www/img el archivo cal.gif (gif del calendario). 
- en www/js  el calendario_es.js

No estamos para nada convencidos de que esta sea la mejor forma de implementarlo, por lo tanto sentite con la libertad
cambiarlo o proponer cambios, esto es simplemente una primer posibilidad.


Algunos comentarios/defectos/mejoras futuras:
- El formato de fecha elegido por defecto es el de postgresql (yyyy-mm-dd) y el de la página es dd/mm/yyyy.
  Puede crearse distintos formatos de fecha para distintas bases heredando de esta clase (por ejemplo).
- A Mejorar:
	* Emplear la clase RECURSO para incluir el código javascript del calendario
	* Ver la forma de crear el recurso sólo si se emplean fechas, de momento se incluye el javascript siempre (aunque puede quedar en el cache) y puede usarse o no.
	* Adaptar el estilo del calendario al del TOBA
	
Para que en las listas se muestren correctamente en el campo "Formateo de Columnas" de la lista que desea mostrar una fecha hay que ingresar: xxx=>"ver_fecha" (Dónde xxx es el número de campo que es fecha)
---------------------------------------------------------------------------------------------------------
- Campo fecha (ef_fecha)

insert into apl_elemento_formulario values ('ef_fecha','Campo editado como fecha');

- En \apex\php\nucleo\browser\interface\ef.php se agrego clase ef_fecha
<.
.
* 			|
*			+----> ef_fecha
.
.
//########################################################################################################
//########################################################################################################

class ef_fecha extends ef
// Editbox de texto
{
	var $tamano;
	
	function ef_fecha($padre,$id,$nombre,$descripcion, $tamano)
	{
		parent::ef($padre,$id,$nombre,$descripcion);
		$this->tamano = $tamano;
	}

	function obtener_input()
	{
		if($this->estado=="NULL") $this->estado="";
		$this->estado = stripslashes($this->estado);
		return form::fecha($this->padre,$this->id_form,$this->estado,false,$this->tamano,$this->tamano);
	}
	function cambiar_fecha($fecha,$sep_actual,$sep_nuevo){
		$f = explode($sep_actual,$fecha);
		return $f[2] . $sep_nuevo . $f[1] . $sep_nuevo . $f[0];
	}
	function cargar_estado($estado="")
	//Carga el estado interno
	{
   		if($estado!=""){									
    		$this->estado=$this->cambiar_fecha($estado,'-','/');
	    }elseif(isset($_POST[$this->id_form])){
   			$this->estado=$_POST[$this->id_form];
    	}
	}
	function obtener_estado()
	//Devuelve el estado interno
	{
		// En este punto se formatea la fecha
		return $this->cambiar_fecha($this->estado,'/','-');
	}	
}

//########################################################################################################
//########################################################################################################

.
.>


- En \apex\php\nucleo\browser\interface\form.php se agrego function fecha(....) y además se modificó el abrir y el cerrar para adaptarse al calendario.  De momento se está incluyendo el código en todos los formularios, tengan calendario o no.  La ventaja es que el .js queda en el cache del navegador.
<.
.
	function fecha($padre,$nombre,$actual,$read_only,$len,$size,$clase="ef-input")
	// EditBox
	{
		$r = "<INPUT type='text' name='$nombre' maxlength='$len' size='$size' id='f_$nombre' ";
		if (isset($actual)) $r .= "value='$actual' ";
		if ($read_only) $r .= "onFocus='this.blur()' ";
		$r .= "class='$clase'>";	
		$r .= "<A id=link_$nombre ";		
		$r .= " onclick='calendario.select(document.forms[0].f_$nombre,\"link_$nombre\",\"dd/MM/yyyy\")' ";
		$r .= " href=# name=link_$nombre><img src='/apex/img/cal.gif' alt='Seleccione la fecha' width='16' height='16' border='0'></A> ";
		return $r;
	}
.
.
?	function abrir($nombre,$action,$extra="",$method="POST")
?	{
?		//FALTA: Referenciar al script como recurso!!!!	
		$r = "<SCRIPT language=JavaScript src='/apex/js/calendario_es.js'></SCRIPT>\n";
		$r.= "<SCRIPT language=JavaScript>document.write(getCalendarStyles());</SCRIPT>\n";
		$r.= "<SCRIPT language=JavaScript>var calendario = new CalendarPopup('div_calendario');calendario.showYearNavigation();calendario.showYearNavigationInput();</SCRIPT>\n";
?		$r.= "\n<form name='$nombre' id='$nombre' method='$method' action='$action' $extra style='margin-bottom:0;margin-top:0;'>\n";
?		return $r;
?	}
.
.
?	function cerrar()
?	{
		$r = "<DIV id=div_calendario  style='VISIBILITY: hidden; POSITION: absolute; BACKGROUND-COLOR: white; layer-background-color: white'></DIV>\n";
?		$r.= "</form>\n";
?		return $r;
?	}
.
.>
Para visualizar los campos de tipo fecha en las listas cambiamos lo siguiente:
- En \apex\php\nucleo\browser\clases\lista.php se agregó:
<.
.
// Las dos funciones siguientes estan para prueba (Santiago)
(la primera de estas funciones también está en ef.php pero se agrego aquí para que este visible ! ! !)
	function cambiar_fecha($fecha,$sep_actual,$sep_nuevo){
		$f = explode($sep_actual,$fecha);
		return $f[2] . $sep_nuevo . $f[1] . $sep_nuevo . $f[0];
	}
	function ver_fecha($fecha){
	    if(isset($fecha)){return cambiar_fecha($fecha,'-','/');} else {return '';};
	}
.
.>

