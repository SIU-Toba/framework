RTF:
---


- Se creo un nuevo tipo de página para formatos no HTML (vacias) llamada "Reporte RTF".  
Para ello se actualizó la tabla apl_pagina_tipo para que la nueva referencia tome el contenido
de nucleo/browser/tipo_pagina/rtf_arriba.inc.php siendo este un archivo de 0 bytes.
(pagina_tipo=>rtf,descripcion=>Reporte RTF,include_arriba=>nucleo/browser/tipo_pagina/rtf_arriba.inc.php)

Se generó el archivo nucleo/browser/interface/rtf.php.

En el archivo lista.php:
Se agregó el siguiente include:
<.
.
require_once("nucleo/browser/interface/rtf.php"); // AGREGADO POR SANTIAGO
.
.>
Se renombró la funcion obtener_html por obtener_html_real y se agregó el siguiente código
al principio de dicha funcion:
<.
.
/* Santiago: agrega el link a generar el reporte.*/
		echo"<a href='".$this->solicitud->vinculador->generar_url(null,$get)."&rtf=si' class='lista-link' >Imprimir</a>\n";
/* Santiago: fin */
.
.>


Se agregaron las siguientes funciones:
<.
.
	function obtener_html($get=null,$generar_vinculos=true)
	/*Santiago: Funcion "nueva", verifica si viene rtf=si e invoca a obtener_rtf (A MEJORAR ! ! !)*/
	{
			if (isset($_GET['rtf'])) {
				objeto_lista::obtener_rtf();
			} else {
                		objeto_lista::obtener_html_real($get,$generar_vinculos);
			};
	}


	function obtener_rtf(){

// ----------------  desde aca	
		//Array que especifica que columnas son claves
	//	$clave_vinculo = explode(",",$this->info_lista["vinculo_clave"]);
		//Titulos
		$col_titulos = explode(",",$this->info_lista["col_titulos"]);
 		//ei_arbol($col_titulos);
		//Columnas visibles
		//$col_ver = array($this->info_lista["col_ver"]);
		eval("\$col_ver = array(".$this->info_lista["col_ver"].");");
		eval("\$col_formato = array(".$this->info_lista["col_formato"].");");
 		//ei_arbol($col_ver);
//------ hasta aca se podria separar en otra funcion (para que la usen todos(html, rtf, etc))
		//echo "sdfsdfsdf";
		eval(rtf::generarEncabezadoHTML($this->info_lista["titulo"],"attachment"));
		//generarEncabezadoHTML(nombre del archivo a generar ,$contentDisposition)

		//-[2]- ARMO EL CUADRO -----------------------------------------------
		
		$doc = rtf::generarDefinicion();

		$doc .= rtf::generarHeader($this->info_lista["titulo"]."  \\line  ".$this->info_lista["subtitulo"],"portrait");
		//generarHeader($titulo,$orientacion="portrait")
		// falta poder poner bien un subtitulo

 		$doc .= rtf::generarFooter("portrait",date("d-m-Y"));
  		//generarFooter($orientacion="portrait",$texto="")
		
		//Genero la cabecera del as columnas
		
		$total_columnas = 0;
		$anchoTotal = 0;//el ancho, por ahora lo estoy seteando por porcentaje. puede cambiarse
		$anchoPagina = 108; //portrait
		
		foreach($col_titulos as $col){
			$encabezado[$total_columnas]=$col;
			$justificado[$total_columnas]="qc";	// centrado
			$anchoCol += round((1/sizeof($col_ver))*$anchoPagina);// por ahora todas las filas tienen un igual ancho
			$ancho[$total_columnas]=$anchoCol;
			$total_columnas++;
		}
		$doc .= rtf::generarEncabezado($encabezado,$justificado,$ancho);
		
		
		// Genero las FILAS de datos
		if(count($this->datos)>0){
			for ($f=0; $f<count($this->datos);$f++)	{
				$i = 0;
				foreach($col_ver as $col => $estilo){
					//Genero las COLUMAS
					if(isset($col_formato[$col])){
						$funcion = $col_formato[$col];
						//$dato = $funcion($this->datos[$f],$col); //Para el futuro: le paso la fila entera para que juegue!
						$dato[$i] = $funcion($this->datos[$f][$col]); //Por ahora solo doy formato al dato en SI!
					}else{
						$dato[$i] = $this->datos[$f][$col];
					}
					$i++;
				}
				$doc .= rtf::generarRegistro($dato,$justificado,$ancho);
			}
		}else{
			$doc .= rtf::RTFMensajePorDefecto();//// ver
		}
		$doc .= "}";
		echo $doc;
	}

.
.>
